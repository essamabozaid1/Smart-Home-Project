
AMIT Project AD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000cf2  00000d86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000d86  2**0
                  ALLOC
  3 .stab         00003378  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000af8  00000000  00000000  00004100  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004bf8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  00004c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000201f  00000000  00000000  00004e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000960  00000000  00000000  00006e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b9f  00000000  00000000  000077a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000047c  00000000  00000000  00008348  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000706  00000000  00000000  000087c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001216  00000000  00000000  00008eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 */ 

#include "D:\embedded new\Interfacing Drivers\DIO\DIO.h"
#include "LCD.h"

void LCD_SendCommand(uint8 command){
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
	DIO_WritePin(GetPort(RS_Pin),GetPin(RS_Pin),LOW);
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	DIO_WritePin(GetPort(RW_Pin),GetPin(RW_Pin),LOW);
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	DIO_WritePin(GetPort(E_Pin),GetPin(E_Pin),LOW);
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	
	DIO_WritePin(GetPort(D7_Pin),GetPin(D7_Pin),Read_Bit(command,7));
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_10>
  2c:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	DIO_WritePin(GetPort(D6_Pin),GetPin(D6_Pin),Read_Bit(command,6));	
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	DIO_WritePin(GetPort(D5_Pin),GetPin(D5_Pin),Read_Bit(command,5));
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_19>
	DIO_WritePin(GetPort(D4_Pin),GetPin(D4_Pin),Read_Bit(command,4));
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
	
	DIO_WritePin(GetPort(E_Pin),GetPin(E_Pin),HIGH);
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
	_delay_us(5);
	DIO_WritePin(GetPort(E_Pin),GetPin(E_Pin),LOW);
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
	
	_delay_us(100); 
	
	DIO_WritePin(GetPort(D7_Pin),GetPin(D7_Pin),Read_Bit(command,3));
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  8a:	0c 94 77 06 	jmp	0xcee	; 0xcee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ACT_Init>:
	DIO_WritePin(GetPort(D6_Pin),GetPin(D6_Pin),Read_Bit(command,2));	
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
	DIO_WritePin(GetPort(D5_Pin),GetPin(D5_Pin),Read_Bit(command,1));
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	66 97       	sbiw	r28, 0x16	; 22
  ac:	0f b6       	in	r0, 0x3f	; 63
	DIO_WritePin(GetPort(D4_Pin),GetPin(D4_Pin),Read_Bit(command,0));
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
  b6:	5c 01       	movw	r10, r24
  b8:	81 e0       	ldi	r24, 0x01	; 1
	
	DIO_WritePin(GetPort(E_Pin),GetPin(E_Pin),HIGH);
  ba:	8c 87       	std	Y+12, r24	; 0x0c
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	8d 87       	std	Y+13, r24	; 0x0d
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	8e 87       	std	Y+14, r24	; 0x0e
  c4:	81 e1       	ldi	r24, 0x11	; 17
  c6:	8f 87       	std	Y+15, r24	; 0x0f
  c8:	82 e1       	ldi	r24, 0x12	; 18
  ca:	88 8b       	std	Y+16, r24	; 0x10
	_delay_us(5);
	DIO_WritePin(GetPort(E_Pin),GetPin(E_Pin),LOW);
  cc:	83 e1       	ldi	r24, 0x13	; 19
  ce:	89 8b       	std	Y+17, r24	; 0x11
  d0:	81 e2       	ldi	r24, 0x21	; 33
  d2:	8a 8b       	std	Y+18, r24	; 0x12
  d4:	82 e2       	ldi	r24, 0x22	; 34
  d6:	8b 8b       	std	Y+19, r24	; 0x13
  d8:	83 e2       	ldi	r24, 0x23	; 35
  da:	8c 8b       	std	Y+20, r24	; 0x14
  dc:	84 e2       	ldi	r24, 0x24	; 36
  de:	8d 8b       	std	Y+21, r24	; 0x15
  e0:	85 e2       	ldi	r24, 0x25	; 37

	_delay_us(100); 
	if(command==0x01||command==0x02||command==0x03){
  e2:	8e 8b       	std	Y+22, r24	; 0x16
  e4:	8e 01       	movw	r16, r28
  e6:	04 5f       	subi	r16, 0xF4	; 244
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	1f 4f       	sbci	r17, 0xFF	; 255
  ea:	ee 24       	eor	r14, r14
  ec:	e3 94       	inc	r14
  ee:	f1 2c       	mov	r15, r1
  f0:	ec 0e       	add	r14, r28
  f2:	fd 1e       	adc	r15, r29
		_delay_ms(2);	//this exception instruction it 2 ms 
						//other instruction it take 100 microSecond
	}
}
  f4:	6e 01       	movw	r12, r28
  f6:	87 e1       	ldi	r24, 0x17	; 23
	Door_LED1_ID,
	Door_LED2_ID,
	Door_LED3_ID,
	Door_LED4_ID,	
	}ACT_ID;
ACT_Table ACT_Init(){
  f8:	c8 0e       	add	r12, r24
  fa:	d1 1c       	adc	r13, r1
	ST.ACT_Addresses[10]=Address_Door_LED4;
	//---------------------------------------------------
	uint8 i;
	//EEPROM_Write(ST.ACT_Addresses[0],0);
	for(i=0;i<11;i++){
		ST.ACT_States[i]=EEPROM_Read(ST.ACT_Addresses[i]);
  fc:	f8 01       	movw	r30, r16
  fe:	81 91       	ld	r24, Z+
 100:	8f 01       	movw	r16, r30
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 c1 02 	call	0x582	; 0x582 <EEPROM_Read>
 108:	f7 01       	movw	r30, r14
 10a:	81 93       	st	Z+, r24
 10c:	7f 01       	movw	r14, r30
	ST.ACT_Addresses[9] =Address_Door_LED3;
	ST.ACT_Addresses[10]=Address_Door_LED4;
	//---------------------------------------------------
	uint8 i;
	//EEPROM_Write(ST.ACT_Addresses[0],0);
	for(i=0;i<11;i++){
 10e:	0c 15       	cp	r16, r12
 110:	1d 05       	cpc	r17, r13
 112:	a1 f7       	brne	.-24     	; 0xfc <ACT_Init+0x6a>
		ST.ACT_States[i]=EEPROM_Read(ST.ACT_Addresses[i]);
	}
	return ST; 
 114:	86 e1       	ldi	r24, 0x16	; 22
 116:	fe 01       	movw	r30, r28
 118:	31 96       	adiw	r30, 0x01	; 1
 11a:	d5 01       	movw	r26, r10
 11c:	01 90       	ld	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	8a 95       	dec	r24
 122:	e1 f7       	brne	.-8      	; 0x11c <ACT_Init+0x8a>
}
 124:	c5 01       	movw	r24, r10
 126:	66 96       	adiw	r28, 0x16	; 22
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	df 90       	pop	r13
 140:	cf 90       	pop	r12
 142:	bf 90       	pop	r11
 144:	af 90       	pop	r10
 146:	08 95       	ret

00000148 <main>:
int main(void)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	66 97       	sbiw	r28, 0x16	; 22
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
	uint8 Sen_ID,Sen_Reading;
	TWI_SlaveInit(0x7A);
 15c:	8a e7       	ldi	r24, 0x7A	; 122
 15e:	0e 94 67 04 	call	0x8ce	; 0x8ce <TWI_SlaveInit>
	Motor_Init(AC_Motor0);
 162:	8d e0       	ldi	r24, 0x0D	; 13
 164:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Motor_Init>
	Motor_Init(AC_Motor1);
 168:	8e e0       	ldi	r24, 0x0E	; 14
 16a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Motor_Init>
	Motor_Init(AC_Motor2);
 16e:	8f e0       	ldi	r24, 0x0F	; 15
 170:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Motor_Init>
	Motor_Init(Door_LED0);
 174:	88 e1       	ldi	r24, 0x18	; 24
 176:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Motor_Init>
	Motor_Init(Door_LED1);
 17a:	89 e1       	ldi	r24, 0x19	; 25
 17c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Motor_Init>
	Motor_Init(Door_LED2);
 180:	8a e1       	ldi	r24, 0x1A	; 26
 182:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Motor_Init>
	Motor_Init(Door_LED3);
 186:	8b e1       	ldi	r24, 0x1B	; 27
 188:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Motor_Init>
	Motor_Init(Door_LED4);
 18c:	8c e1       	ldi	r24, 0x1C	; 28
 18e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Motor_Init>
	
	Led_Init(Led0);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 c8 02 	call	0x590	; 0x590 <Led_Init>
	Led_Init(Led1);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 c8 02 	call	0x590	; 0x590 <Led_Init>
	Led_Init(Led2);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 c8 02 	call	0x590	; 0x590 <Led_Init>
	ACT_Table ST=ACT_Init();	//read the Actuator states from EEPROM 
 1a4:	ce 01       	movw	r24, r28
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <ACT_Init>
	//DIO_SetDirPin(PB,5,OUTPUT);
	//DIO_SetDirPin(PB,6,OUTPUT);
	//DIO_SetDirPin(PB,7,OUTPUT);
    while(1)
    {
		if(_ret==OK){ // to Reading I2C
 1ac:	80 91 63 00 	lds	r24, 0x0063
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	d9 f4       	brne	.+54     	; 0x1ea <main+0xa2>
			_ret=NOK;
 1b4:	10 92 63 00 	sts	0x0063, r1
			Sen_ID=_Data>>4;
 1b8:	80 91 64 00 	lds	r24, 0x0064
			Sen_Reading=_Data & 0x0F;
 1bc:	60 91 64 00 	lds	r22, 0x0064
 1c0:	6f 70       	andi	r22, 0x0F	; 15
	//DIO_SetDirPin(PB,7,OUTPUT);
    while(1)
    {
		if(_ret==OK){ // to Reading I2C
			_ret=NOK;
			Sen_ID=_Data>>4;
 1c2:	82 95       	swap	r24
 1c4:	8f 70       	andi	r24, 0x0F	; 15
			Sen_Reading=_Data & 0x0F;
			ST.ACT_States[Sen_ID]=Sen_Reading;
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	e1 e0       	ldi	r30, 0x01	; 1
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ec 0f       	add	r30, r28
 1ce:	fd 1f       	adc	r31, r29
 1d0:	e8 0f       	add	r30, r24
 1d2:	f9 1f       	adc	r31, r25
 1d4:	60 83       	st	Z, r22
			EEPROM_Write(ST.ACT_Addresses[Sen_ID],Sen_Reading);
 1d6:	ec e0       	ldi	r30, 0x0C	; 12
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	ec 0f       	add	r30, r28
 1dc:	fd 1f       	adc	r31, r29
 1de:	e8 0f       	add	r30, r24
 1e0:	f9 1f       	adc	r31, r25
 1e2:	80 81       	ld	r24, Z
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 b9 02 	call	0x572	; 0x572 <EEPROM_Write>
		}
		
		//---------------
		//=============== A/C MOTOR=================
		//--------------- A/C MOTOR0---------------
		if(ST.ACT_States[AC_Motor0_ID]==0){
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	81 11       	cpse	r24, r1
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <main+0xb2>
			//stop
			Motor_Handler(AC_Motor0,Stop);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	8d e0       	ldi	r24, 0x0D	; 13
 1f4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <main+0xcc>
		}else if(ST.ACT_States[AC_Motor0_ID]==1){
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	29 f4       	brne	.+10     	; 0x208 <main+0xc0>
			//low Speed
			Motor_Handler(AC_Motor0,Medium_Speed);	
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	8d e0       	ldi	r24, 0x0D	; 13
 202:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 206:	06 c0       	rjmp	.+12     	; 0x214 <main+0xcc>
		}else if (ST.ACT_States[AC_Motor0_ID]==2)
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	21 f4       	brne	.+8      	; 0x214 <main+0xcc>
		{
			Motor_Handler(AC_Motor0,High_Speed);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	8d e0       	ldi	r24, 0x0D	; 13
 210:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
			// High Speed
		}else{}
		//--------------- A/C MOTOR1---------------
		if(ST.ACT_States[AC_Motor1_ID]==0){
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	81 11       	cpse	r24, r1
 218:	05 c0       	rjmp	.+10     	; 0x224 <main+0xdc>
			//stop
			Motor_Handler(AC_Motor1,Stop);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8e e0       	ldi	r24, 0x0E	; 14
 21e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 222:	0d c0       	rjmp	.+26     	; 0x23e <main+0xf6>
		}else if(ST.ACT_States[AC_Motor1_ID]==1){
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	29 f4       	brne	.+10     	; 0x232 <main+0xea>
			//low Speed
			Motor_Handler(AC_Motor1,Medium_Speed);	
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	8e e0       	ldi	r24, 0x0E	; 14
 22c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 230:	06 c0       	rjmp	.+12     	; 0x23e <main+0xf6>
		}else if (ST.ACT_States[AC_Motor1_ID]==2)
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	21 f4       	brne	.+8      	; 0x23e <main+0xf6>
		{
			Motor_Handler(AC_Motor1,High_Speed);
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	8e e0       	ldi	r24, 0x0E	; 14
 23a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
			// High Speed
		}else{}
		//--------------- A/C MOTOR2---------------
		if(ST.ACT_States[AC_Motor2_ID]==0){
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	81 11       	cpse	r24, r1
 242:	05 c0       	rjmp	.+10     	; 0x24e <main+0x106>
			//stop
			Motor_Handler(AC_Motor2,Stop);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 24c:	0d c0       	rjmp	.+26     	; 0x268 <main+0x120>
		}else if(ST.ACT_States[AC_Motor2_ID]==1){
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	29 f4       	brne	.+10     	; 0x25c <main+0x114>
			//low Speed
			Motor_Handler(AC_Motor2,Medium_Speed);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	8f e0       	ldi	r24, 0x0F	; 15
 256:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 25a:	06 c0       	rjmp	.+12     	; 0x268 <main+0x120>
			
		}else if (ST.ACT_States[AC_Motor2_ID]==2)
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	21 f4       	brne	.+8      	; 0x268 <main+0x120>
		{
			Motor_Handler(AC_Motor2,High_Speed);
 260:	62 e0       	ldi	r22, 0x02	; 2
 262:	8f e0       	ldi	r24, 0x0F	; 15
 264:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
			// High Speed
		}else{}
			
		//===============LEDS ========================
		//---------------LED0-------------------------
		if(ST.ACT_States[LED0_ID]==HIGH){
 268:	8c 81       	ldd	r24, Y+4	; 0x04
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	29 f4       	brne	.+10     	; 0x278 <main+0x130>
			Led_Handler(Led0,HIGH);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Led_Handler>
 276:	05 c0       	rjmp	.+10     	; 0x282 <main+0x13a>
		}else if(ST.ACT_States[LED0_ID]==LOW){
 278:	81 11       	cpse	r24, r1
 27a:	03 c0       	rjmp	.+6      	; 0x282 <main+0x13a>
			Led_Handler(Led0,LOW);	
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Led_Handler>
		}else{}
		//---------------LED1-------------------------
		if(ST.ACT_States[LED1_ID]==HIGH){
 282:	8d 81       	ldd	r24, Y+5	; 0x05
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	21 f4       	brne	.+8      	; 0x290 <main+0x148>
			Led_Handler(Led1,HIGH);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Led_Handler>
 28e:	06 c0       	rjmp	.+12     	; 0x29c <main+0x154>
		}else if(ST.ACT_States[LED1_ID]==LOW){
 290:	81 11       	cpse	r24, r1
 292:	04 c0       	rjmp	.+8      	; 0x29c <main+0x154>
			Led_Handler(Led1,LOW);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Led_Handler>
		}else{}
		//---------------LED2-------------------------
		if(ST.ACT_States[LED2_ID]==HIGH){
 29c:	8e 81       	ldd	r24, Y+6	; 0x06
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f4       	brne	.+10     	; 0x2ac <main+0x164>
			Led_Handler(Led2,HIGH);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Led_Handler>
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <main+0x170>
		}else if(ST.ACT_States[LED2_ID]==LOW){
 2ac:	81 11       	cpse	r24, r1
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <main+0x170>
			Led_Handler(Led2,LOW);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Led_Handler>
		}else{}
		//================DOOR Motors ================
		//--------------- DOOR MOTOR0---------------
		if(ST.ACT_States[Door_LED0_ID]==0){
 2b8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ba:	81 11       	cpse	r24, r1
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <main+0x180>
			//stop
			Motor_Handler(Door_LED0,Stop);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	88 e1       	ldi	r24, 0x18	; 24
 2c2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <main+0x18c>
		}else if(ST.ACT_States[Door_LED0_ID]==1){
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <main+0x18c>
			//High-speed
			Motor_Handler(Door_LED0,High_Speed);
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
		}else{}
		//--------------- DOOR MOTOR1---------------
		if(ST.ACT_States[Door_LED1_ID]==0){
 2d4:	88 85       	ldd	r24, Y+8	; 0x08
 2d6:	81 11       	cpse	r24, r1
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <main+0x19c>
			//stop
			Motor_Handler(Door_LED1,Stop);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	89 e1       	ldi	r24, 0x19	; 25
 2de:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <main+0x1a8>
		}else if(ST.ACT_States[Door_LED1_ID]==1){
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <main+0x1a8>
			//High-speed
			Motor_Handler(Door_LED1,High_Speed);
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	89 e1       	ldi	r24, 0x19	; 25
 2ec:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
		}else{}
		//--------------- DOOR MOTOR2---------------
		if(ST.ACT_States[Door_LED2_ID]==0){
 2f0:	89 85       	ldd	r24, Y+9	; 0x09
 2f2:	81 11       	cpse	r24, r1
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <main+0x1b8>
			//stop
			Motor_Handler(Door_LED2,Stop);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	8a e1       	ldi	r24, 0x1A	; 26
 2fa:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <main+0x1c4>
		}else if(ST.ACT_States[Door_LED2_ID]==1){
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	21 f4       	brne	.+8      	; 0x30c <main+0x1c4>
			//High-speed
			Motor_Handler(Door_LED2,High_Speed);
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	8a e1       	ldi	r24, 0x1A	; 26
 308:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
		}else{}
		//--------------- DOOR MOTOR3---------------
		if(ST.ACT_States[Door_LED3_ID]==0){
 30c:	8a 85       	ldd	r24, Y+10	; 0x0a
 30e:	81 11       	cpse	r24, r1
 310:	05 c0       	rjmp	.+10     	; 0x31c <main+0x1d4>
			//stop
			Motor_Handler(Door_LED3,Stop);
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	8b e1       	ldi	r24, 0x1B	; 27
 316:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 31a:	06 c0       	rjmp	.+12     	; 0x328 <main+0x1e0>
		}else if(ST.ACT_States[Door_LED3_ID]==1){
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	21 f4       	brne	.+8      	; 0x328 <main+0x1e0>
			//High-speed
			Motor_Handler(Door_LED3,High_Speed);
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	8b e1       	ldi	r24, 0x1B	; 27
 324:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
		}else{}
		//--------------- DOOR MOTOR4---------------
		if(ST.ACT_States[Door_LED4_ID]==0){
 328:	8b 85       	ldd	r24, Y+11	; 0x0b
 32a:	81 11       	cpse	r24, r1
 32c:	05 c0       	rjmp	.+10     	; 0x338 <main+0x1f0>
			//stop
			Motor_Handler(Door_LED4,Stop);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	8c e1       	ldi	r24, 0x1C	; 28
 332:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 336:	3a cf       	rjmp	.-396    	; 0x1ac <main+0x64>
		}else if(ST.ACT_States[Door_LED4_ID]==1){
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	09 f0       	breq	.+2      	; 0x33e <main+0x1f6>
 33c:	37 cf       	rjmp	.-402    	; 0x1ac <main+0x64>
			//High-speed
			Motor_Handler(Door_LED4,High_Speed);
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	8c e1       	ldi	r24, 0x1C	; 28
 342:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Motor_Handler>
 346:	32 cf       	rjmp	.-412    	; 0x1ac <main+0x64>

00000348 <DIO_WritePin>:
	}
	return Pin_Level;
	
}
void DIO_WritePin(DIO_Port_t Port_Num,uint8 Pin_Num,uint8 Level){
	switch(Port_Num){
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	21 f1       	breq	.+72     	; 0x394 <DIO_WritePin+0x4c>
 34c:	30 f0       	brcs	.+12     	; 0x35a <DIO_WritePin+0x12>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	f1 f1       	breq	.+124    	; 0x3ce <DIO_WritePin+0x86>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	09 f0       	breq	.+2      	; 0x358 <DIO_WritePin+0x10>
 356:	74 c0       	rjmp	.+232    	; 0x440 <DIO_WritePin+0xf8>
 358:	57 c0       	rjmp	.+174    	; 0x408 <DIO_WritePin+0xc0>
		case PA :
				//Set_Bit(DDRA,Pin_Num);
				if(HIGH==Level){
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	69 f4       	brne	.+26     	; 0x378 <DIO_WritePin+0x30>
					Set_Bit(PORTA,Pin_Num);
 35e:	2b b3       	in	r18, 0x1b	; 27
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	ac 01       	movw	r20, r24
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_WritePin+0x24>
 368:	44 0f       	add	r20, r20
 36a:	55 1f       	adc	r21, r21
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_WritePin+0x20>
 370:	ba 01       	movw	r22, r20
 372:	62 2b       	or	r22, r18
 374:	6b bb       	out	0x1b, r22	; 27
 376:	08 95       	ret
				}else{
					Clear_Bit(PORTA,Pin_Num);
 378:	2b b3       	in	r18, 0x1b	; 27
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	ac 01       	movw	r20, r24
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_WritePin+0x3e>
 382:	44 0f       	add	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_WritePin+0x3a>
 38a:	ba 01       	movw	r22, r20
 38c:	60 95       	com	r22
 38e:	62 23       	and	r22, r18
 390:	6b bb       	out	0x1b, r22	; 27
 392:	08 95       	ret
				}
				break;
			case PB :
				//Set_Bit(DDRB,Pin_Num);
				if(HIGH==Level){
 394:	41 30       	cpi	r20, 0x01	; 1
 396:	69 f4       	brne	.+26     	; 0x3b2 <DIO_WritePin+0x6a>
					Set_Bit(PORTB,Pin_Num);
 398:	28 b3       	in	r18, 0x18	; 24
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	ac 01       	movw	r20, r24
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_WritePin+0x5e>
 3a2:	44 0f       	add	r20, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_WritePin+0x5a>
 3aa:	ba 01       	movw	r22, r20
 3ac:	62 2b       	or	r22, r18
 3ae:	68 bb       	out	0x18, r22	; 24
 3b0:	08 95       	ret
				}else{
					Clear_Bit(PORTB,Pin_Num);
 3b2:	28 b3       	in	r18, 0x18	; 24
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	ac 01       	movw	r20, r24
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_WritePin+0x78>
 3bc:	44 0f       	add	r20, r20
 3be:	55 1f       	adc	r21, r21
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_WritePin+0x74>
 3c4:	ba 01       	movw	r22, r20
 3c6:	60 95       	com	r22
 3c8:	62 23       	and	r22, r18
 3ca:	68 bb       	out	0x18, r22	; 24
 3cc:	08 95       	ret
				}
				break;
			case PC :
				//Set_Bit(DDRC,Pin_Num);
				if(HIGH==Level){
 3ce:	41 30       	cpi	r20, 0x01	; 1
 3d0:	69 f4       	brne	.+26     	; 0x3ec <DIO_WritePin+0xa4>
					Set_Bit(PORTC,Pin_Num);
 3d2:	25 b3       	in	r18, 0x15	; 21
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	ac 01       	movw	r20, r24
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_WritePin+0x98>
 3dc:	44 0f       	add	r20, r20
 3de:	55 1f       	adc	r21, r21
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_WritePin+0x94>
 3e4:	ba 01       	movw	r22, r20
 3e6:	62 2b       	or	r22, r18
 3e8:	65 bb       	out	0x15, r22	; 21
 3ea:	08 95       	ret
				}else{
					Clear_Bit(PORTC,Pin_Num);
 3ec:	25 b3       	in	r18, 0x15	; 21
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_WritePin+0xb2>
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_WritePin+0xae>
 3fe:	ba 01       	movw	r22, r20
 400:	60 95       	com	r22
 402:	62 23       	and	r22, r18
 404:	65 bb       	out	0x15, r22	; 21
 406:	08 95       	ret
				}
				break;
			case PD :
				//Set_Bit(DDRD,Pin_Num);
				if(HIGH==Level){
 408:	41 30       	cpi	r20, 0x01	; 1
 40a:	69 f4       	brne	.+26     	; 0x426 <DIO_WritePin+0xde>
					Set_Bit(PORTD,Pin_Num);
 40c:	22 b3       	in	r18, 0x12	; 18
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ac 01       	movw	r20, r24
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_WritePin+0xd2>
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_WritePin+0xce>
 41e:	ba 01       	movw	r22, r20
 420:	62 2b       	or	r22, r18
 422:	62 bb       	out	0x12, r22	; 18
 424:	08 95       	ret
				}else{
					Clear_Bit(PORTD,Pin_Num);
 426:	22 b3       	in	r18, 0x12	; 18
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	ac 01       	movw	r20, r24
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_WritePin+0xec>
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_WritePin+0xe8>
 438:	ba 01       	movw	r22, r20
 43a:	60 95       	com	r22
 43c:	62 23       	and	r22, r18
 43e:	62 bb       	out	0x12, r22	; 18
 440:	08 95       	ret

00000442 <DIO_SetDirPin>:
		default:
		break;
	}
}
void DIO_SetDirPin(DIO_Port_t Port_Num,uint8 Pin_Num,DIO_Pin_State_t value){
	switch(Port_Num){
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	61 f1       	breq	.+88     	; 0x49e <DIO_SetDirPin+0x5c>
 446:	38 f0       	brcs	.+14     	; 0x456 <DIO_SetDirPin+0x14>
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	09 f4       	brne	.+2      	; 0x44e <DIO_SetDirPin+0xc>
 44c:	4c c0       	rjmp	.+152    	; 0x4e6 <DIO_SetDirPin+0xa4>
 44e:	83 30       	cpi	r24, 0x03	; 3
 450:	09 f0       	breq	.+2      	; 0x454 <DIO_SetDirPin+0x12>
 452:	8e c0       	rjmp	.+284    	; 0x570 <DIO_SetDirPin+0x12e>
 454:	6b c0       	rjmp	.+214    	; 0x52c <DIO_SetDirPin+0xea>
		case PA :
			if(OUTPUT==value){
 456:	41 11       	cpse	r20, r1
 458:	0d c0       	rjmp	.+26     	; 0x474 <DIO_SetDirPin+0x32>
				Set_Bit(DDRA,Pin_Num);
 45a:	2a b3       	in	r18, 0x1a	; 26
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	ac 01       	movw	r20, r24
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_SetDirPin+0x26>
 464:	44 0f       	add	r20, r20
 466:	55 1f       	adc	r21, r21
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_SetDirPin+0x22>
 46c:	ba 01       	movw	r22, r20
 46e:	62 2b       	or	r22, r18
 470:	6a bb       	out	0x1a, r22	; 26
 472:	08 95       	ret
			}else{
				Clear_Bit(DDRA,Pin_Num);
 474:	2a b3       	in	r18, 0x1a	; 26
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	fc 01       	movw	r30, r24
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_SetDirPin+0x40>
 47e:	ee 0f       	add	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_SetDirPin+0x3c>
 486:	bf 01       	movw	r22, r30
 488:	8e 2f       	mov	r24, r30
 48a:	80 95       	com	r24
 48c:	82 23       	and	r24, r18
 48e:	8a bb       	out	0x1a, r24	; 26
				if(INPULLUP==value){
 490:	41 30       	cpi	r20, 0x01	; 1
 492:	09 f0       	breq	.+2      	; 0x496 <DIO_SetDirPin+0x54>
 494:	6d c0       	rjmp	.+218    	; 0x570 <DIO_SetDirPin+0x12e>
					Set_Bit(PORTA,Pin_Num);
 496:	8b b3       	in	r24, 0x1b	; 27
 498:	68 2b       	or	r22, r24
 49a:	6b bb       	out	0x1b, r22	; 27
 49c:	08 95       	ret
					
				}
			}
		break;
		case PB :
			if(OUTPUT==value){
 49e:	41 11       	cpse	r20, r1
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <DIO_SetDirPin+0x7a>
				Set_Bit(DDRB,Pin_Num);
 4a2:	27 b3       	in	r18, 0x17	; 23
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ac 01       	movw	r20, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_SetDirPin+0x6e>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_SetDirPin+0x6a>
 4b4:	ba 01       	movw	r22, r20
 4b6:	62 2b       	or	r22, r18
 4b8:	67 bb       	out	0x17, r22	; 23
 4ba:	08 95       	ret
			}else{
				Clear_Bit(DDRB,Pin_Num);
 4bc:	27 b3       	in	r18, 0x17	; 23
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	fc 01       	movw	r30, r24
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_SetDirPin+0x88>
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_SetDirPin+0x84>
 4ce:	bf 01       	movw	r22, r30
 4d0:	8e 2f       	mov	r24, r30
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	87 bb       	out	0x17, r24	; 23
				if(INPULLUP==value){
 4d8:	41 30       	cpi	r20, 0x01	; 1
 4da:	09 f0       	breq	.+2      	; 0x4de <DIO_SetDirPin+0x9c>
 4dc:	49 c0       	rjmp	.+146    	; 0x570 <DIO_SetDirPin+0x12e>
					Set_Bit(PORTB,Pin_Num);
 4de:	88 b3       	in	r24, 0x18	; 24
 4e0:	68 2b       	or	r22, r24
 4e2:	68 bb       	out	0x18, r22	; 24
 4e4:	08 95       	ret
						
				}
			}
		break;
		case PC :
			if(OUTPUT==value){
 4e6:	41 11       	cpse	r20, r1
 4e8:	0d c0       	rjmp	.+26     	; 0x504 <DIO_SetDirPin+0xc2>
				Set_Bit(DDRC,Pin_Num);
 4ea:	24 b3       	in	r18, 0x14	; 20
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	ac 01       	movw	r20, r24
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_SetDirPin+0xb6>
 4f4:	44 0f       	add	r20, r20
 4f6:	55 1f       	adc	r21, r21
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_SetDirPin+0xb2>
 4fc:	ba 01       	movw	r22, r20
 4fe:	62 2b       	or	r22, r18
 500:	64 bb       	out	0x14, r22	; 20
 502:	08 95       	ret
			}else{
				Clear_Bit(DDRC,Pin_Num);
 504:	24 b3       	in	r18, 0x14	; 20
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_SetDirPin+0xd0>
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_SetDirPin+0xcc>
 516:	bf 01       	movw	r22, r30
 518:	8e 2f       	mov	r24, r30
 51a:	80 95       	com	r24
 51c:	82 23       	and	r24, r18
 51e:	84 bb       	out	0x14, r24	; 20
				if(INPULLUP==value){
 520:	41 30       	cpi	r20, 0x01	; 1
 522:	31 f5       	brne	.+76     	; 0x570 <DIO_SetDirPin+0x12e>
					Set_Bit(PORTC,Pin_Num);
 524:	85 b3       	in	r24, 0x15	; 21
 526:	68 2b       	or	r22, r24
 528:	65 bb       	out	0x15, r22	; 21
 52a:	08 95       	ret
						
				}
			}	
		break;
		case PD :
			if(OUTPUT==value){
 52c:	41 11       	cpse	r20, r1
 52e:	0d c0       	rjmp	.+26     	; 0x54a <DIO_SetDirPin+0x108>
				Set_Bit(DDRD,Pin_Num);
 530:	21 b3       	in	r18, 0x11	; 17
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	ac 01       	movw	r20, r24
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_SetDirPin+0xfc>
 53a:	44 0f       	add	r20, r20
 53c:	55 1f       	adc	r21, r21
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_SetDirPin+0xf8>
 542:	ba 01       	movw	r22, r20
 544:	62 2b       	or	r22, r18
 546:	61 bb       	out	0x11, r22	; 17
 548:	08 95       	ret
			}else{
				Clear_Bit(DDRD,Pin_Num);
 54a:	21 b3       	in	r18, 0x11	; 17
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	fc 01       	movw	r30, r24
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_SetDirPin+0x116>
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_SetDirPin+0x112>
 55c:	bf 01       	movw	r22, r30
 55e:	8e 2f       	mov	r24, r30
 560:	80 95       	com	r24
 562:	82 23       	and	r24, r18
 564:	81 bb       	out	0x11, r24	; 17
				if(INPULLUP==value){
 566:	41 30       	cpi	r20, 0x01	; 1
 568:	19 f4       	brne	.+6      	; 0x570 <DIO_SetDirPin+0x12e>
					Set_Bit(PORTD,Pin_Num);
 56a:	82 b3       	in	r24, 0x12	; 18
 56c:	68 2b       	or	r22, r24
 56e:	62 bb       	out	0x12, r22	; 18
 570:	08 95       	ret

00000572 <EEPROM_Write>:
 * Created: 4/6/2020 4:41:45 AM
 *  Author: lenovo
 */ 
#include "EEPROM_Internal.h"
void EEPROM_Write(uint16 Address,uint8 Data){
	while(Read_Bit(EECR,EEWE)); /* Wait for completion of previous write */
 572:	e1 99       	sbic	0x1c, 1	; 28
 574:	fe cf       	rjmp	.-4      	; 0x572 <EEPROM_Write>
	EEAR=Address;				// Set up address register
 576:	9f bb       	out	0x1f, r25	; 31
 578:	8e bb       	out	0x1e, r24	; 30
	EEDR=Data;					// Set up  data registers
 57a:	6d bb       	out	0x1d, r22	; 29
	Set_Bit(EECR,EEMWE);		/* Write logical one to EEMWE */
 57c:	e2 9a       	sbi	0x1c, 2	; 28
	Set_Bit(EECR,EEWE);			/* Start eeprom write by setting EEWE */
 57e:	e1 9a       	sbi	0x1c, 1	; 28
 580:	08 95       	ret

00000582 <EEPROM_Read>:
}
uint8 EEPROM_Read(uint16 Address){
	while(Read_Bit(EECR,EEWE)); /* Wait for completion of previous write */
 582:	e1 99       	sbic	0x1c, 1	; 28
 584:	fe cf       	rjmp	.-4      	; 0x582 <EEPROM_Read>
	EEAR=Address;				/* Set up address register */
 586:	9f bb       	out	0x1f, r25	; 31
 588:	8e bb       	out	0x1e, r24	; 30
	Set_Bit(EECR,EERE);			/* Start eeprom read by writing EERE */
 58a:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
 58c:	8d b3       	in	r24, 0x1d	; 29
 58e:	08 95       	ret

00000590 <Led_Init>:
 */ 
#include "STD_Types.h"
#include "LED.h"
#include "DIO.h"
void Led_Init(Led_Num_t Led_Num){
	DIO_SetDirPin(GetPort(Led_Num),GetPin(Led_Num),OUTPUT);
 590:	68 2f       	mov	r22, r24
 592:	67 70       	andi	r22, 0x07	; 7
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	86 95       	lsr	r24
 598:	86 95       	lsr	r24
 59a:	86 95       	lsr	r24
 59c:	0e 94 21 02 	call	0x442	; 0x442 <DIO_SetDirPin>
 5a0:	08 95       	ret

000005a2 <Led_Handler>:
}
void Led_Handler(Led_Num_t Led_Num,uint8 Level){
	if(HIGH==Level){
 5a2:	61 30       	cpi	r22, 0x01	; 1
 5a4:	49 f4       	brne	.+18     	; 0x5b8 <Led_Handler+0x16>
		DIO_WritePin(GetPort(Led_Num),GetPin(Led_Num),HIGH);
 5a6:	68 2f       	mov	r22, r24
 5a8:	67 70       	andi	r22, 0x07	; 7
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	86 95       	lsr	r24
 5ae:	86 95       	lsr	r24
 5b0:	86 95       	lsr	r24
 5b2:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
 5b6:	08 95       	ret
	}else if(LOW==Level){
 5b8:	61 11       	cpse	r22, r1
 5ba:	08 c0       	rjmp	.+16     	; 0x5cc <Led_Handler+0x2a>
		DIO_WritePin(GetPort(Led_Num),GetPin(Led_Num),LOW);
 5bc:	68 2f       	mov	r22, r24
 5be:	67 70       	andi	r22, 0x07	; 7
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	86 95       	lsr	r24
 5c4:	86 95       	lsr	r24
 5c6:	86 95       	lsr	r24
 5c8:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
 5cc:	08 95       	ret

000005ce <Motor_Init>:
uint8 Motor1_Flag=0;
uint8 Motor2_Flag=0;


//uint8 cycle=0;
void Motor_Init(Motor_Num_t Motor_Num){
 5ce:	cf 93       	push	r28
 5d0:	c8 2f       	mov	r28, r24
	TIMER0_Init(F_PWM);
 5d2:	83 e0       	ldi	r24, 0x03	; 3
 5d4:	0e 94 af 03 	call	0x75e	; 0x75e <TIMER0_Init>
	TIMER0_SetOutputMode(DISCONNECT);
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	0e 94 54 04 	call	0x8a8	; 0x8a8 <TIMER0_SetOutputMode>
	DIO_SetDirPin(GetPort(Motor_Num),GetPin(Motor_Num),OUTPUT);
 5de:	6c 2f       	mov	r22, r28
 5e0:	67 70       	andi	r22, 0x07	; 7
 5e2:	40 e0       	ldi	r20, 0x00	; 0
 5e4:	8c 2f       	mov	r24, r28
 5e6:	86 95       	lsr	r24
 5e8:	86 95       	lsr	r24
 5ea:	86 95       	lsr	r24
 5ec:	0e 94 21 02 	call	0x442	; 0x442 <DIO_SetDirPin>
}
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <Motor_Handler>:
void Motor_Handler(Motor_Num_t Motor_Num, Motor_State_t Motor_State){ 
	switch(Motor_Num){// to Initiate the state of motor (when it was Medium speed and will change high speed should clear flag
 5f4:	8e 30       	cpi	r24, 0x0E	; 14
 5f6:	39 f0       	breq	.+14     	; 0x606 <Motor_Handler+0x12>
 5f8:	8f 30       	cpi	r24, 0x0F	; 15
 5fa:	41 f0       	breq	.+16     	; 0x60c <Motor_Handler+0x18>
 5fc:	8d 30       	cpi	r24, 0x0D	; 13
 5fe:	41 f4       	brne	.+16     	; 0x610 <Motor_Handler+0x1c>
		case AC_Motor0	:    Motor0_Flag=0;		  break;
 600:	10 92 62 00 	sts	0x0062, r1
 604:	05 c0       	rjmp	.+10     	; 0x610 <Motor_Handler+0x1c>
		case AC_Motor1	:    Motor1_Flag=0;		  break;
 606:	10 92 61 00 	sts	0x0061, r1
 60a:	02 c0       	rjmp	.+4      	; 0x610 <Motor_Handler+0x1c>
		case AC_Motor2	:    Motor2_Flag=0;		  break;
 60c:	10 92 60 00 	sts	0x0060, r1
		default:break;
	}
	if(Motor_State==Stop){
 610:	61 11       	cpse	r22, r1
 612:	09 c0       	rjmp	.+18     	; 0x626 <Motor_Handler+0x32>
		DIO_WritePin(GetPort(Motor_Num),GetPin(Motor_Num),LOW);
 614:	68 2f       	mov	r22, r24
 616:	67 70       	andi	r22, 0x07	; 7
 618:	40 e0       	ldi	r20, 0x00	; 0
 61a:	86 95       	lsr	r24
 61c:	86 95       	lsr	r24
 61e:	86 95       	lsr	r24
 620:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
 624:	08 95       	ret
	}else if(Motor_State==Medium_Speed){
 626:	61 30       	cpi	r22, 0x01	; 1
 628:	c1 f4       	brne	.+48     	; 0x65a <Motor_Handler+0x66>
		switch(Motor_Num){// to Initiate the state of motor
 62a:	8e 30       	cpi	r24, 0x0E	; 14
 62c:	41 f0       	breq	.+16     	; 0x63e <Motor_Handler+0x4a>
 62e:	8f 30       	cpi	r24, 0x0F	; 15
 630:	51 f0       	breq	.+20     	; 0x646 <Motor_Handler+0x52>
 632:	8d 30       	cpi	r24, 0x0D	; 13
 634:	59 f4       	brne	.+22     	; 0x64c <Motor_Handler+0x58>
			case AC_Motor0	:	 Motor0_Flag=1;		  break;
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	80 93 62 00 	sts	0x0062, r24
 63c:	07 c0       	rjmp	.+14     	; 0x64c <Motor_Handler+0x58>
			case AC_Motor1	:	 Motor1_Flag=1;		  break;
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	80 93 61 00 	sts	0x0061, r24
 644:	03 c0       	rjmp	.+6      	; 0x64c <Motor_Handler+0x58>
			case AC_Motor2	:	 Motor2_Flag=1;		  break;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	80 93 60 00 	sts	0x0060, r24
			default: break;
		}
		TIMER0_SetDutyCycle(50);
 64c:	82 e3       	ldi	r24, 0x32	; 50
 64e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <TIMER0_SetDutyCycle>
		TIMER0_Start(PRESC_64);
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	0e 94 df 03 	call	0x7be	; 0x7be <TIMER0_Start>
 658:	08 95       	ret
	}else if(Motor_State==High_Speed){
 65a:	62 30       	cpi	r22, 0x02	; 2
 65c:	41 f4       	brne	.+16     	; 0x66e <Motor_Handler+0x7a>
		DIO_WritePin(GetPort(Motor_Num),GetPin(Motor_Num),HIGH);
 65e:	68 2f       	mov	r22, r24
 660:	67 70       	andi	r22, 0x07	; 7
 662:	41 e0       	ldi	r20, 0x01	; 1
 664:	86 95       	lsr	r24
 666:	86 95       	lsr	r24
 668:	86 95       	lsr	r24
 66a:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
 66e:	08 95       	ret

00000670 <__vector_11>:
	}
}
ISR(TIMER0_OVF_vect){
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	2f 93       	push	r18
 67c:	3f 93       	push	r19
 67e:	4f 93       	push	r20
 680:	5f 93       	push	r21
 682:	6f 93       	push	r22
 684:	7f 93       	push	r23
 686:	8f 93       	push	r24
 688:	9f 93       	push	r25
 68a:	af 93       	push	r26
 68c:	bf 93       	push	r27
 68e:	ef 93       	push	r30
 690:	ff 93       	push	r31
	if(Motor0_Flag==1){
 692:	80 91 62 00 	lds	r24, 0x0062
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	21 f4       	brne	.+8      	; 0x6a2 <__vector_11+0x32>
		DIO_WritePin(GetPort(AC_Motor0),GetPin(AC_Motor0),HIGH);
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	65 e0       	ldi	r22, 0x05	; 5
 69e:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
	}
	if(Motor1_Flag==1){
 6a2:	80 91 61 00 	lds	r24, 0x0061
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <__vector_11+0x42>
		DIO_WritePin(GetPort(AC_Motor1),GetPin(AC_Motor1),HIGH);
 6aa:	41 e0       	ldi	r20, 0x01	; 1
 6ac:	66 e0       	ldi	r22, 0x06	; 6
 6ae:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
	}
	if(Motor2_Flag==1){
 6b2:	80 91 60 00 	lds	r24, 0x0060
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	21 f4       	brne	.+8      	; 0x6c2 <__vector_11+0x52>
		DIO_WritePin(GetPort(AC_Motor2),GetPin(AC_Motor2),HIGH);
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	67 e0       	ldi	r22, 0x07	; 7
 6be:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
	}
}
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <__vector_10>:
ISR(TIMER0_COMP_vect){
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
	if(Motor0_Flag){
 706:	80 91 62 00 	lds	r24, 0x0062
 70a:	88 23       	and	r24, r24
 70c:	29 f0       	breq	.+10     	; 0x718 <__vector_10+0x34>
		DIO_WritePin(GetPort(AC_Motor0),GetPin(AC_Motor0),LOW);
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	65 e0       	ldi	r22, 0x05	; 5
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
	}	
	if(Motor1_Flag){
 718:	80 91 61 00 	lds	r24, 0x0061
 71c:	88 23       	and	r24, r24
 71e:	29 f0       	breq	.+10     	; 0x72a <__vector_10+0x46>
		DIO_WritePin(GetPort(AC_Motor1),GetPin(AC_Motor1),LOW);
 720:	40 e0       	ldi	r20, 0x00	; 0
 722:	66 e0       	ldi	r22, 0x06	; 6
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
	}
	if(Motor2_Flag){
 72a:	80 91 60 00 	lds	r24, 0x0060
 72e:	88 23       	and	r24, r24
 730:	29 f0       	breq	.+10     	; 0x73c <__vector_10+0x58>
		DIO_WritePin(GetPort(AC_Motor2),GetPin(AC_Motor2),LOW);
 732:	40 e0       	ldi	r20, 0x00	; 0
 734:	67 e0       	ldi	r22, 0x07	; 7
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_WritePin>
	}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	7f 91       	pop	r23
 74a:	6f 91       	pop	r22
 74c:	5f 91       	pop	r21
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	0f 90       	pop	r0
 756:	0f be       	out	0x3f, r0	; 63
 758:	0f 90       	pop	r0
 75a:	1f 90       	pop	r1
 75c:	18 95       	reti

0000075e <TIMER0_Init>:
 */ 
 #include "Timer0.h"
 
 void  TIMER0_Init(TIMER0_Mode_t mode)
{
	cli();
 75e:	f8 94       	cli
	
	Clear_Bit(TCCR0,FOC0);
 760:	93 b7       	in	r25, 0x33	; 51
 762:	9f 77       	andi	r25, 0x7F	; 127
 764:	93 bf       	out	0x33, r25	; 51
	
	Read_Bit(mode,0) == HIGH ? Set_Bit(TCCR0,WGM00): Clear_Bit(TCCR0,WGM00);
 766:	80 ff       	sbrs	r24, 0
 768:	04 c0       	rjmp	.+8      	; 0x772 <TIMER0_Init+0x14>
 76a:	93 b7       	in	r25, 0x33	; 51
 76c:	90 64       	ori	r25, 0x40	; 64
 76e:	93 bf       	out	0x33, r25	; 51
 770:	03 c0       	rjmp	.+6      	; 0x778 <TIMER0_Init+0x1a>
 772:	93 b7       	in	r25, 0x33	; 51
 774:	9f 7b       	andi	r25, 0xBF	; 191
 776:	93 bf       	out	0x33, r25	; 51
	Read_Bit(mode,1) == HIGH ? Set_Bit(TCCR0,WGM01): Clear_Bit(TCCR0,WGM01);
 778:	81 ff       	sbrs	r24, 1
 77a:	04 c0       	rjmp	.+8      	; 0x784 <TIMER0_Init+0x26>
 77c:	93 b7       	in	r25, 0x33	; 51
 77e:	98 60       	ori	r25, 0x08	; 8
 780:	93 bf       	out	0x33, r25	; 51
 782:	03 c0       	rjmp	.+6      	; 0x78a <TIMER0_Init+0x2c>
 784:	93 b7       	in	r25, 0x33	; 51
 786:	97 7f       	andi	r25, 0xF7	; 247
 788:	93 bf       	out	0x33, r25	; 51
	switch(mode){
 78a:	81 30       	cpi	r24, 0x01	; 1
 78c:	51 f0       	breq	.+20     	; 0x7a2 <TIMER0_Init+0x44>
 78e:	28 f0       	brcs	.+10     	; 0x79a <TIMER0_Init+0x3c>
 790:	82 30       	cpi	r24, 0x02	; 2
 792:	71 f0       	breq	.+28     	; 0x7b0 <TIMER0_Init+0x52>
 794:	83 30       	cpi	r24, 0x03	; 3
 796:	79 f4       	brne	.+30     	; 0x7b6 <TIMER0_Init+0x58>
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <TIMER0_Init+0x44>
		case NORMAL:
			Set_Bit(TIMSK,TOIE0);
 79a:	89 b7       	in	r24, 0x39	; 57
 79c:	81 60       	ori	r24, 0x01	; 1
 79e:	89 bf       	out	0x39, r24	; 57
		break;
 7a0:	0a c0       	rjmp	.+20     	; 0x7b6 <TIMER0_Init+0x58>
		case PHASE_CORRECT:
		case F_PWM:
			Set_Bit(TIMSK,TOIE0);
 7a2:	89 b7       	in	r24, 0x39	; 57
 7a4:	81 60       	ori	r24, 0x01	; 1
 7a6:	89 bf       	out	0x39, r24	; 57
			Set_Bit(TIMSK,OCIE0);
 7a8:	89 b7       	in	r24, 0x39	; 57
 7aa:	82 60       	ori	r24, 0x02	; 2
 7ac:	89 bf       	out	0x39, r24	; 57
		break;
 7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <TIMER0_Init+0x58>
		case CTC:
			Set_Bit(TIMSK,OCIE0);		
 7b0:	89 b7       	in	r24, 0x39	; 57
 7b2:	82 60       	ori	r24, 0x02	; 2
 7b4:	89 bf       	out	0x39, r24	; 57
		break;
		default:
		break;
	}
	TCNT0 = 0;
 7b6:	12 be       	out	0x32, r1	; 50
	OCR0  = 0;
 7b8:	1c be       	out	0x3c, r1	; 60
	 
    sei();
 7ba:	78 94       	sei
 7bc:	08 95       	ret

000007be <TIMER0_Start>:
}
void  TIMER0_Start(TIMER0_Prescaler_t presc)
{
	Read_Bit(presc,0) == HIGH ? Set_Bit(TCCR0,CS00):Clear_Bit(TCCR0,CS00);
 7be:	80 ff       	sbrs	r24, 0
 7c0:	04 c0       	rjmp	.+8      	; 0x7ca <TIMER0_Start+0xc>
 7c2:	93 b7       	in	r25, 0x33	; 51
 7c4:	91 60       	ori	r25, 0x01	; 1
 7c6:	93 bf       	out	0x33, r25	; 51
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <TIMER0_Start+0x12>
 7ca:	93 b7       	in	r25, 0x33	; 51
 7cc:	9e 7f       	andi	r25, 0xFE	; 254
 7ce:	93 bf       	out	0x33, r25	; 51
	Read_Bit(presc,1) == HIGH ? Set_Bit(TCCR0,CS01):Clear_Bit(TCCR0,CS01);
 7d0:	81 ff       	sbrs	r24, 1
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <TIMER0_Start+0x1e>
 7d4:	93 b7       	in	r25, 0x33	; 51
 7d6:	92 60       	ori	r25, 0x02	; 2
 7d8:	93 bf       	out	0x33, r25	; 51
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <TIMER0_Start+0x24>
 7dc:	93 b7       	in	r25, 0x33	; 51
 7de:	9d 7f       	andi	r25, 0xFD	; 253
 7e0:	93 bf       	out	0x33, r25	; 51
	Read_Bit(presc,2) == HIGH ? Set_Bit(TCCR0,CS02):Clear_Bit(TCCR0,CS02);
 7e2:	82 ff       	sbrs	r24, 2
 7e4:	04 c0       	rjmp	.+8      	; 0x7ee <TIMER0_Start+0x30>
 7e6:	83 b7       	in	r24, 0x33	; 51
 7e8:	84 60       	ori	r24, 0x04	; 4
 7ea:	83 bf       	out	0x33, r24	; 51
 7ec:	08 95       	ret
 7ee:	83 b7       	in	r24, 0x33	; 51
 7f0:	8b 7f       	andi	r24, 0xFB	; 251
 7f2:	83 bf       	out	0x33, r24	; 51
 7f4:	08 95       	ret

000007f6 <TIMER0_SetDutyCycle>:
{
	return TCNT0;
}
void  TIMER0_SetDutyCycle(uint8 duty)
{
	uint8 OutMode = Read_Bit(TCCR0,COM00) | (Read_Bit(TCCR0,COM01)<<1);
 7f6:	93 b7       	in	r25, 0x33	; 51
 7f8:	43 b7       	in	r20, 0x33	; 51
 7fa:	45 fb       	bst	r20, 5
 7fc:	22 27       	eor	r18, r18
 7fe:	20 f9       	bld	r18, 0
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	22 0f       	add	r18, r18
 804:	33 1f       	adc	r19, r19
 806:	92 95       	swap	r25
 808:	91 70       	andi	r25, 0x01	; 1
 80a:	29 2b       	or	r18, r25
	if(OutMode == INVERTING)
 80c:	23 30       	cpi	r18, 0x03	; 3
 80e:	f1 f4       	brne	.+60     	; 0x84c <TIMER0_SetDutyCycle+0x56>
	{
		/* DUTY_CYCLE = (0xFF-OCR0)/0xFF*/
		OCR0  = 0xFF - ((duty/100.0)*0xFF);
 810:	68 2f       	mov	r22, r24
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatsisf>
 81c:	20 e0       	ldi	r18, 0x00	; 0
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	48 ec       	ldi	r20, 0xC8	; 200
 822:	52 e4       	ldi	r21, 0x42	; 66
 824:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__divsf3>
 828:	20 e0       	ldi	r18, 0x00	; 0
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	4f e7       	ldi	r20, 0x7F	; 127
 82e:	53 e4       	ldi	r21, 0x43	; 67
 830:	0e 94 14 06 	call	0xc28	; 0xc28 <__mulsf3>
 834:	9b 01       	movw	r18, r22
 836:	ac 01       	movw	r20, r24
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	8f e7       	ldi	r24, 0x7F	; 127
 83e:	93 e4       	ldi	r25, 0x43	; 67
 840:	0e 94 8d 04 	call	0x91a	; 0x91a <__subsf3>
 844:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fixunssfsi>
 848:	6c bf       	out	0x3c, r22	; 60
 84a:	08 95       	ret
	}
	else if (OutMode == NIN_INVERTING)
 84c:	22 30       	cpi	r18, 0x02	; 2
 84e:	b1 f4       	brne	.+44     	; 0x87c <__stack+0x1d>
	{
		/* DUTY_CYCLE = OCR0/0xFF*/
		OCR0 = ((duty/100.0)*0xFF);
 850:	68 2f       	mov	r22, r24
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatsisf>
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	48 ec       	ldi	r20, 0xC8	; 200
 862:	52 e4       	ldi	r21, 0x42	; 66
 864:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__divsf3>
 868:	20 e0       	ldi	r18, 0x00	; 0
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	4f e7       	ldi	r20, 0x7F	; 127
 86e:	53 e4       	ldi	r21, 0x43	; 67
 870:	0e 94 14 06 	call	0xc28	; 0xc28 <__mulsf3>
 874:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fixunssfsi>
 878:	6c bf       	out	0x3c, r22	; 60
 87a:	08 95       	ret
	}
	else{
			// Not Correct as a good driver but in the kit the OC0 is Connected to LCD_E
			OCR0 = ((duty/100.0)*0xFF);
 87c:	68 2f       	mov	r22, r24
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatsisf>
 888:	20 e0       	ldi	r18, 0x00	; 0
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	48 ec       	ldi	r20, 0xC8	; 200
 88e:	52 e4       	ldi	r21, 0x42	; 66
 890:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__divsf3>
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	4f e7       	ldi	r20, 0x7F	; 127
 89a:	53 e4       	ldi	r21, 0x43	; 67
 89c:	0e 94 14 06 	call	0xc28	; 0xc28 <__mulsf3>
 8a0:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fixunssfsi>
 8a4:	6c bf       	out	0x3c, r22	; 60
 8a6:	08 95       	ret

000008a8 <TIMER0_SetOutputMode>:
{
	OCR0 = comp;
}
void  TIMER0_SetOutputMode(TIMER0_Output_Mode_t mode)
{
	Read_Bit(mode,0) == HIGH ? Set_Bit(TCCR0,COM00): Clear_Bit(TCCR0,COM00);
 8a8:	80 ff       	sbrs	r24, 0
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <TIMER0_SetOutputMode+0xc>
 8ac:	93 b7       	in	r25, 0x33	; 51
 8ae:	90 61       	ori	r25, 0x10	; 16
 8b0:	93 bf       	out	0x33, r25	; 51
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <TIMER0_SetOutputMode+0x12>
 8b4:	93 b7       	in	r25, 0x33	; 51
 8b6:	9f 7e       	andi	r25, 0xEF	; 239
 8b8:	93 bf       	out	0x33, r25	; 51
	Read_Bit(mode,1) == HIGH ? Set_Bit(TCCR0,COM01): Clear_Bit(TCCR0,COM01);
 8ba:	81 ff       	sbrs	r24, 1
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <TIMER0_SetOutputMode+0x1e>
 8be:	83 b7       	in	r24, 0x33	; 51
 8c0:	80 62       	ori	r24, 0x20	; 32
 8c2:	83 bf       	out	0x33, r24	; 51
 8c4:	08 95       	ret
 8c6:	83 b7       	in	r24, 0x33	; 51
 8c8:	8f 7d       	andi	r24, 0xDF	; 223
 8ca:	83 bf       	out	0x33, r24	; 51
 8cc:	08 95       	ret

000008ce <TWI_SlaveInit>:
	}
	return OK;
}
void TWI_SlaveInit(uint8 own_address)
{
	TWAR = (own_address<<1);
 8ce:	88 0f       	add	r24, r24
 8d0:	82 b9       	out	0x02, r24	; 2
	cli();
 8d2:	f8 94       	cli
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWIE) | (1<<TWINT) ;
 8d4:	85 ec       	ldi	r24, 0xC5	; 197
 8d6:	86 bf       	out	0x36, r24	; 54
	sei();
 8d8:	78 94       	sei
 8da:	08 95       	ret

000008dc <__vector_19>:
}

ISR(TWI_vect){
 8dc:	1f 92       	push	r1
 8de:	0f 92       	push	r0
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	0f 92       	push	r0
 8e4:	11 24       	eor	r1, r1
 8e6:	8f 93       	push	r24
	Toggle_Bit(PORTC,7);
 8e8:	85 b3       	in	r24, 0x15	; 21
 8ea:	80 58       	subi	r24, 0x80	; 128
 8ec:	85 bb       	out	0x15, r24	; 21
	if((TWSR & 0xF8)==SLAVE_DATA_RECEIVED_ACK_SENT){
 8ee:	81 b1       	in	r24, 0x01	; 1
 8f0:	88 7f       	andi	r24, 0xF8	; 248
 8f2:	80 38       	cpi	r24, 0x80	; 128
 8f4:	49 f4       	brne	.+18     	; 0x908 <__vector_19+0x2c>
		_Data=TWDR; // datasheet Said "so all accesses to (TWAR),(TWSR), and	(TWDR) must be complete before clearing this flag"
 8f6:	83 b1       	in	r24, 0x03	; 3
 8f8:	80 93 64 00 	sts	0x0064, r24
		TWCR |= (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 8fc:	86 b7       	in	r24, 0x36	; 54
 8fe:	84 6c       	ori	r24, 0xC4	; 196
 900:	86 bf       	out	0x36, r24	; 54
		_ret = OK;
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	80 93 63 00 	sts	0x0063, r24
	}
	TWCR |= (1<<TWINT) | (1<<TWEN);// datasheet said "this flag is not automatically cleared by hardware when executing the interrupt routine"
 908:	86 b7       	in	r24, 0x36	; 54
 90a:	84 68       	ori	r24, 0x84	; 132
 90c:	86 bf       	out	0x36, r24	; 54
 90e:	8f 91       	pop	r24
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <__subsf3>:
 91a:	50 58       	subi	r21, 0x80	; 128

0000091c <__addsf3>:
 91c:	bb 27       	eor	r27, r27
 91e:	aa 27       	eor	r26, r26
 920:	0e d0       	rcall	.+28     	; 0x93e <__addsf3x>
 922:	48 c1       	rjmp	.+656    	; 0xbb4 <__fp_round>
 924:	39 d1       	rcall	.+626    	; 0xb98 <__fp_pscA>
 926:	30 f0       	brcs	.+12     	; 0x934 <__addsf3+0x18>
 928:	3e d1       	rcall	.+636    	; 0xba6 <__fp_pscB>
 92a:	20 f0       	brcs	.+8      	; 0x934 <__addsf3+0x18>
 92c:	31 f4       	brne	.+12     	; 0x93a <__addsf3+0x1e>
 92e:	9f 3f       	cpi	r25, 0xFF	; 255
 930:	11 f4       	brne	.+4      	; 0x936 <__addsf3+0x1a>
 932:	1e f4       	brtc	.+6      	; 0x93a <__addsf3+0x1e>
 934:	2e c1       	rjmp	.+604    	; 0xb92 <__fp_nan>
 936:	0e f4       	brtc	.+2      	; 0x93a <__addsf3+0x1e>
 938:	e0 95       	com	r30
 93a:	e7 fb       	bst	r30, 7
 93c:	24 c1       	rjmp	.+584    	; 0xb86 <__fp_inf>

0000093e <__addsf3x>:
 93e:	e9 2f       	mov	r30, r25
 940:	4a d1       	rcall	.+660    	; 0xbd6 <__fp_split3>
 942:	80 f3       	brcs	.-32     	; 0x924 <__addsf3+0x8>
 944:	ba 17       	cp	r27, r26
 946:	62 07       	cpc	r22, r18
 948:	73 07       	cpc	r23, r19
 94a:	84 07       	cpc	r24, r20
 94c:	95 07       	cpc	r25, r21
 94e:	18 f0       	brcs	.+6      	; 0x956 <__addsf3x+0x18>
 950:	71 f4       	brne	.+28     	; 0x96e <__addsf3x+0x30>
 952:	9e f5       	brtc	.+102    	; 0x9ba <__addsf3x+0x7c>
 954:	62 c1       	rjmp	.+708    	; 0xc1a <__fp_zero>
 956:	0e f4       	brtc	.+2      	; 0x95a <__addsf3x+0x1c>
 958:	e0 95       	com	r30
 95a:	0b 2e       	mov	r0, r27
 95c:	ba 2f       	mov	r27, r26
 95e:	a0 2d       	mov	r26, r0
 960:	0b 01       	movw	r0, r22
 962:	b9 01       	movw	r22, r18
 964:	90 01       	movw	r18, r0
 966:	0c 01       	movw	r0, r24
 968:	ca 01       	movw	r24, r20
 96a:	a0 01       	movw	r20, r0
 96c:	11 24       	eor	r1, r1
 96e:	ff 27       	eor	r31, r31
 970:	59 1b       	sub	r21, r25
 972:	99 f0       	breq	.+38     	; 0x99a <__addsf3x+0x5c>
 974:	59 3f       	cpi	r21, 0xF9	; 249
 976:	50 f4       	brcc	.+20     	; 0x98c <__addsf3x+0x4e>
 978:	50 3e       	cpi	r21, 0xE0	; 224
 97a:	68 f1       	brcs	.+90     	; 0x9d6 <__addsf3x+0x98>
 97c:	1a 16       	cp	r1, r26
 97e:	f0 40       	sbci	r31, 0x00	; 0
 980:	a2 2f       	mov	r26, r18
 982:	23 2f       	mov	r18, r19
 984:	34 2f       	mov	r19, r20
 986:	44 27       	eor	r20, r20
 988:	58 5f       	subi	r21, 0xF8	; 248
 98a:	f3 cf       	rjmp	.-26     	; 0x972 <__addsf3x+0x34>
 98c:	46 95       	lsr	r20
 98e:	37 95       	ror	r19
 990:	27 95       	ror	r18
 992:	a7 95       	ror	r26
 994:	f0 40       	sbci	r31, 0x00	; 0
 996:	53 95       	inc	r21
 998:	c9 f7       	brne	.-14     	; 0x98c <__addsf3x+0x4e>
 99a:	7e f4       	brtc	.+30     	; 0x9ba <__addsf3x+0x7c>
 99c:	1f 16       	cp	r1, r31
 99e:	ba 0b       	sbc	r27, r26
 9a0:	62 0b       	sbc	r22, r18
 9a2:	73 0b       	sbc	r23, r19
 9a4:	84 0b       	sbc	r24, r20
 9a6:	ba f0       	brmi	.+46     	; 0x9d6 <__addsf3x+0x98>
 9a8:	91 50       	subi	r25, 0x01	; 1
 9aa:	a1 f0       	breq	.+40     	; 0x9d4 <__addsf3x+0x96>
 9ac:	ff 0f       	add	r31, r31
 9ae:	bb 1f       	adc	r27, r27
 9b0:	66 1f       	adc	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	c2 f7       	brpl	.-16     	; 0x9a8 <__addsf3x+0x6a>
 9b8:	0e c0       	rjmp	.+28     	; 0x9d6 <__addsf3x+0x98>
 9ba:	ba 0f       	add	r27, r26
 9bc:	62 1f       	adc	r22, r18
 9be:	73 1f       	adc	r23, r19
 9c0:	84 1f       	adc	r24, r20
 9c2:	48 f4       	brcc	.+18     	; 0x9d6 <__addsf3x+0x98>
 9c4:	87 95       	ror	r24
 9c6:	77 95       	ror	r23
 9c8:	67 95       	ror	r22
 9ca:	b7 95       	ror	r27
 9cc:	f7 95       	ror	r31
 9ce:	9e 3f       	cpi	r25, 0xFE	; 254
 9d0:	08 f0       	brcs	.+2      	; 0x9d4 <__addsf3x+0x96>
 9d2:	b3 cf       	rjmp	.-154    	; 0x93a <__addsf3+0x1e>
 9d4:	93 95       	inc	r25
 9d6:	88 0f       	add	r24, r24
 9d8:	08 f0       	brcs	.+2      	; 0x9dc <__addsf3x+0x9e>
 9da:	99 27       	eor	r25, r25
 9dc:	ee 0f       	add	r30, r30
 9de:	97 95       	ror	r25
 9e0:	87 95       	ror	r24
 9e2:	08 95       	ret

000009e4 <__divsf3>:
 9e4:	0c d0       	rcall	.+24     	; 0x9fe <__divsf3x>
 9e6:	e6 c0       	rjmp	.+460    	; 0xbb4 <__fp_round>
 9e8:	de d0       	rcall	.+444    	; 0xba6 <__fp_pscB>
 9ea:	40 f0       	brcs	.+16     	; 0x9fc <__divsf3+0x18>
 9ec:	d5 d0       	rcall	.+426    	; 0xb98 <__fp_pscA>
 9ee:	30 f0       	brcs	.+12     	; 0x9fc <__divsf3+0x18>
 9f0:	21 f4       	brne	.+8      	; 0x9fa <__divsf3+0x16>
 9f2:	5f 3f       	cpi	r21, 0xFF	; 255
 9f4:	19 f0       	breq	.+6      	; 0x9fc <__divsf3+0x18>
 9f6:	c7 c0       	rjmp	.+398    	; 0xb86 <__fp_inf>
 9f8:	51 11       	cpse	r21, r1
 9fa:	10 c1       	rjmp	.+544    	; 0xc1c <__fp_szero>
 9fc:	ca c0       	rjmp	.+404    	; 0xb92 <__fp_nan>

000009fe <__divsf3x>:
 9fe:	eb d0       	rcall	.+470    	; 0xbd6 <__fp_split3>
 a00:	98 f3       	brcs	.-26     	; 0x9e8 <__divsf3+0x4>

00000a02 <__divsf3_pse>:
 a02:	99 23       	and	r25, r25
 a04:	c9 f3       	breq	.-14     	; 0x9f8 <__divsf3+0x14>
 a06:	55 23       	and	r21, r21
 a08:	b1 f3       	breq	.-20     	; 0x9f6 <__divsf3+0x12>
 a0a:	95 1b       	sub	r25, r21
 a0c:	55 0b       	sbc	r21, r21
 a0e:	bb 27       	eor	r27, r27
 a10:	aa 27       	eor	r26, r26
 a12:	62 17       	cp	r22, r18
 a14:	73 07       	cpc	r23, r19
 a16:	84 07       	cpc	r24, r20
 a18:	38 f0       	brcs	.+14     	; 0xa28 <__divsf3_pse+0x26>
 a1a:	9f 5f       	subi	r25, 0xFF	; 255
 a1c:	5f 4f       	sbci	r21, 0xFF	; 255
 a1e:	22 0f       	add	r18, r18
 a20:	33 1f       	adc	r19, r19
 a22:	44 1f       	adc	r20, r20
 a24:	aa 1f       	adc	r26, r26
 a26:	a9 f3       	breq	.-22     	; 0xa12 <__divsf3_pse+0x10>
 a28:	33 d0       	rcall	.+102    	; 0xa90 <__divsf3_pse+0x8e>
 a2a:	0e 2e       	mov	r0, r30
 a2c:	3a f0       	brmi	.+14     	; 0xa3c <__divsf3_pse+0x3a>
 a2e:	e0 e8       	ldi	r30, 0x80	; 128
 a30:	30 d0       	rcall	.+96     	; 0xa92 <__divsf3_pse+0x90>
 a32:	91 50       	subi	r25, 0x01	; 1
 a34:	50 40       	sbci	r21, 0x00	; 0
 a36:	e6 95       	lsr	r30
 a38:	00 1c       	adc	r0, r0
 a3a:	ca f7       	brpl	.-14     	; 0xa2e <__divsf3_pse+0x2c>
 a3c:	29 d0       	rcall	.+82     	; 0xa90 <__divsf3_pse+0x8e>
 a3e:	fe 2f       	mov	r31, r30
 a40:	27 d0       	rcall	.+78     	; 0xa90 <__divsf3_pse+0x8e>
 a42:	66 0f       	add	r22, r22
 a44:	77 1f       	adc	r23, r23
 a46:	88 1f       	adc	r24, r24
 a48:	bb 1f       	adc	r27, r27
 a4a:	26 17       	cp	r18, r22
 a4c:	37 07       	cpc	r19, r23
 a4e:	48 07       	cpc	r20, r24
 a50:	ab 07       	cpc	r26, r27
 a52:	b0 e8       	ldi	r27, 0x80	; 128
 a54:	09 f0       	breq	.+2      	; 0xa58 <__divsf3_pse+0x56>
 a56:	bb 0b       	sbc	r27, r27
 a58:	80 2d       	mov	r24, r0
 a5a:	bf 01       	movw	r22, r30
 a5c:	ff 27       	eor	r31, r31
 a5e:	93 58       	subi	r25, 0x83	; 131
 a60:	5f 4f       	sbci	r21, 0xFF	; 255
 a62:	2a f0       	brmi	.+10     	; 0xa6e <__divsf3_pse+0x6c>
 a64:	9e 3f       	cpi	r25, 0xFE	; 254
 a66:	51 05       	cpc	r21, r1
 a68:	68 f0       	brcs	.+26     	; 0xa84 <__divsf3_pse+0x82>
 a6a:	8d c0       	rjmp	.+282    	; 0xb86 <__fp_inf>
 a6c:	d7 c0       	rjmp	.+430    	; 0xc1c <__fp_szero>
 a6e:	5f 3f       	cpi	r21, 0xFF	; 255
 a70:	ec f3       	brlt	.-6      	; 0xa6c <__divsf3_pse+0x6a>
 a72:	98 3e       	cpi	r25, 0xE8	; 232
 a74:	dc f3       	brlt	.-10     	; 0xa6c <__divsf3_pse+0x6a>
 a76:	86 95       	lsr	r24
 a78:	77 95       	ror	r23
 a7a:	67 95       	ror	r22
 a7c:	b7 95       	ror	r27
 a7e:	f7 95       	ror	r31
 a80:	9f 5f       	subi	r25, 0xFF	; 255
 a82:	c9 f7       	brne	.-14     	; 0xa76 <__divsf3_pse+0x74>
 a84:	88 0f       	add	r24, r24
 a86:	91 1d       	adc	r25, r1
 a88:	96 95       	lsr	r25
 a8a:	87 95       	ror	r24
 a8c:	97 f9       	bld	r25, 7
 a8e:	08 95       	ret
 a90:	e1 e0       	ldi	r30, 0x01	; 1
 a92:	66 0f       	add	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	88 1f       	adc	r24, r24
 a98:	bb 1f       	adc	r27, r27
 a9a:	62 17       	cp	r22, r18
 a9c:	73 07       	cpc	r23, r19
 a9e:	84 07       	cpc	r24, r20
 aa0:	ba 07       	cpc	r27, r26
 aa2:	20 f0       	brcs	.+8      	; 0xaac <__divsf3_pse+0xaa>
 aa4:	62 1b       	sub	r22, r18
 aa6:	73 0b       	sbc	r23, r19
 aa8:	84 0b       	sbc	r24, r20
 aaa:	ba 0b       	sbc	r27, r26
 aac:	ee 1f       	adc	r30, r30
 aae:	88 f7       	brcc	.-30     	; 0xa92 <__divsf3_pse+0x90>
 ab0:	e0 95       	com	r30
 ab2:	08 95       	ret

00000ab4 <__fixunssfsi>:
 ab4:	98 d0       	rcall	.+304    	; 0xbe6 <__fp_splitA>
 ab6:	88 f0       	brcs	.+34     	; 0xada <__fixunssfsi+0x26>
 ab8:	9f 57       	subi	r25, 0x7F	; 127
 aba:	90 f0       	brcs	.+36     	; 0xae0 <__fixunssfsi+0x2c>
 abc:	b9 2f       	mov	r27, r25
 abe:	99 27       	eor	r25, r25
 ac0:	b7 51       	subi	r27, 0x17	; 23
 ac2:	a0 f0       	brcs	.+40     	; 0xaec <__fixunssfsi+0x38>
 ac4:	d1 f0       	breq	.+52     	; 0xafa <__fixunssfsi+0x46>
 ac6:	66 0f       	add	r22, r22
 ac8:	77 1f       	adc	r23, r23
 aca:	88 1f       	adc	r24, r24
 acc:	99 1f       	adc	r25, r25
 ace:	1a f0       	brmi	.+6      	; 0xad6 <__fixunssfsi+0x22>
 ad0:	ba 95       	dec	r27
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__fixunssfsi+0x12>
 ad4:	12 c0       	rjmp	.+36     	; 0xafa <__fixunssfsi+0x46>
 ad6:	b1 30       	cpi	r27, 0x01	; 1
 ad8:	81 f0       	breq	.+32     	; 0xafa <__fixunssfsi+0x46>
 ada:	9f d0       	rcall	.+318    	; 0xc1a <__fp_zero>
 adc:	b1 e0       	ldi	r27, 0x01	; 1
 ade:	08 95       	ret
 ae0:	9c c0       	rjmp	.+312    	; 0xc1a <__fp_zero>
 ae2:	67 2f       	mov	r22, r23
 ae4:	78 2f       	mov	r23, r24
 ae6:	88 27       	eor	r24, r24
 ae8:	b8 5f       	subi	r27, 0xF8	; 248
 aea:	39 f0       	breq	.+14     	; 0xafa <__fixunssfsi+0x46>
 aec:	b9 3f       	cpi	r27, 0xF9	; 249
 aee:	cc f3       	brlt	.-14     	; 0xae2 <__fixunssfsi+0x2e>
 af0:	86 95       	lsr	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	b3 95       	inc	r27
 af8:	d9 f7       	brne	.-10     	; 0xaf0 <__fixunssfsi+0x3c>
 afa:	3e f4       	brtc	.+14     	; 0xb0a <__fixunssfsi+0x56>
 afc:	90 95       	com	r25
 afe:	80 95       	com	r24
 b00:	70 95       	com	r23
 b02:	61 95       	neg	r22
 b04:	7f 4f       	sbci	r23, 0xFF	; 255
 b06:	8f 4f       	sbci	r24, 0xFF	; 255
 b08:	9f 4f       	sbci	r25, 0xFF	; 255
 b0a:	08 95       	ret

00000b0c <__floatunsisf>:
 b0c:	e8 94       	clt
 b0e:	09 c0       	rjmp	.+18     	; 0xb22 <__floatsisf+0x12>

00000b10 <__floatsisf>:
 b10:	97 fb       	bst	r25, 7
 b12:	3e f4       	brtc	.+14     	; 0xb22 <__floatsisf+0x12>
 b14:	90 95       	com	r25
 b16:	80 95       	com	r24
 b18:	70 95       	com	r23
 b1a:	61 95       	neg	r22
 b1c:	7f 4f       	sbci	r23, 0xFF	; 255
 b1e:	8f 4f       	sbci	r24, 0xFF	; 255
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	99 23       	and	r25, r25
 b24:	a9 f0       	breq	.+42     	; 0xb50 <__floatsisf+0x40>
 b26:	f9 2f       	mov	r31, r25
 b28:	96 e9       	ldi	r25, 0x96	; 150
 b2a:	bb 27       	eor	r27, r27
 b2c:	93 95       	inc	r25
 b2e:	f6 95       	lsr	r31
 b30:	87 95       	ror	r24
 b32:	77 95       	ror	r23
 b34:	67 95       	ror	r22
 b36:	b7 95       	ror	r27
 b38:	f1 11       	cpse	r31, r1
 b3a:	f8 cf       	rjmp	.-16     	; 0xb2c <__floatsisf+0x1c>
 b3c:	fa f4       	brpl	.+62     	; 0xb7c <__floatsisf+0x6c>
 b3e:	bb 0f       	add	r27, r27
 b40:	11 f4       	brne	.+4      	; 0xb46 <__floatsisf+0x36>
 b42:	60 ff       	sbrs	r22, 0
 b44:	1b c0       	rjmp	.+54     	; 0xb7c <__floatsisf+0x6c>
 b46:	6f 5f       	subi	r22, 0xFF	; 255
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	16 c0       	rjmp	.+44     	; 0xb7c <__floatsisf+0x6c>
 b50:	88 23       	and	r24, r24
 b52:	11 f0       	breq	.+4      	; 0xb58 <__floatsisf+0x48>
 b54:	96 e9       	ldi	r25, 0x96	; 150
 b56:	11 c0       	rjmp	.+34     	; 0xb7a <__floatsisf+0x6a>
 b58:	77 23       	and	r23, r23
 b5a:	21 f0       	breq	.+8      	; 0xb64 <__floatsisf+0x54>
 b5c:	9e e8       	ldi	r25, 0x8E	; 142
 b5e:	87 2f       	mov	r24, r23
 b60:	76 2f       	mov	r23, r22
 b62:	05 c0       	rjmp	.+10     	; 0xb6e <__floatsisf+0x5e>
 b64:	66 23       	and	r22, r22
 b66:	71 f0       	breq	.+28     	; 0xb84 <__floatsisf+0x74>
 b68:	96 e8       	ldi	r25, 0x86	; 134
 b6a:	86 2f       	mov	r24, r22
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	2a f0       	brmi	.+10     	; 0xb7c <__floatsisf+0x6c>
 b72:	9a 95       	dec	r25
 b74:	66 0f       	add	r22, r22
 b76:	77 1f       	adc	r23, r23
 b78:	88 1f       	adc	r24, r24
 b7a:	da f7       	brpl	.-10     	; 0xb72 <__floatsisf+0x62>
 b7c:	88 0f       	add	r24, r24
 b7e:	96 95       	lsr	r25
 b80:	87 95       	ror	r24
 b82:	97 f9       	bld	r25, 7
 b84:	08 95       	ret

00000b86 <__fp_inf>:
 b86:	97 f9       	bld	r25, 7
 b88:	9f 67       	ori	r25, 0x7F	; 127
 b8a:	80 e8       	ldi	r24, 0x80	; 128
 b8c:	70 e0       	ldi	r23, 0x00	; 0
 b8e:	60 e0       	ldi	r22, 0x00	; 0
 b90:	08 95       	ret

00000b92 <__fp_nan>:
 b92:	9f ef       	ldi	r25, 0xFF	; 255
 b94:	80 ec       	ldi	r24, 0xC0	; 192
 b96:	08 95       	ret

00000b98 <__fp_pscA>:
 b98:	00 24       	eor	r0, r0
 b9a:	0a 94       	dec	r0
 b9c:	16 16       	cp	r1, r22
 b9e:	17 06       	cpc	r1, r23
 ba0:	18 06       	cpc	r1, r24
 ba2:	09 06       	cpc	r0, r25
 ba4:	08 95       	ret

00000ba6 <__fp_pscB>:
 ba6:	00 24       	eor	r0, r0
 ba8:	0a 94       	dec	r0
 baa:	12 16       	cp	r1, r18
 bac:	13 06       	cpc	r1, r19
 bae:	14 06       	cpc	r1, r20
 bb0:	05 06       	cpc	r0, r21
 bb2:	08 95       	ret

00000bb4 <__fp_round>:
 bb4:	09 2e       	mov	r0, r25
 bb6:	03 94       	inc	r0
 bb8:	00 0c       	add	r0, r0
 bba:	11 f4       	brne	.+4      	; 0xbc0 <__fp_round+0xc>
 bbc:	88 23       	and	r24, r24
 bbe:	52 f0       	brmi	.+20     	; 0xbd4 <__fp_round+0x20>
 bc0:	bb 0f       	add	r27, r27
 bc2:	40 f4       	brcc	.+16     	; 0xbd4 <__fp_round+0x20>
 bc4:	bf 2b       	or	r27, r31
 bc6:	11 f4       	brne	.+4      	; 0xbcc <__fp_round+0x18>
 bc8:	60 ff       	sbrs	r22, 0
 bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__fp_round+0x20>
 bcc:	6f 5f       	subi	r22, 0xFF	; 255
 bce:	7f 4f       	sbci	r23, 0xFF	; 255
 bd0:	8f 4f       	sbci	r24, 0xFF	; 255
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	08 95       	ret

00000bd6 <__fp_split3>:
 bd6:	57 fd       	sbrc	r21, 7
 bd8:	90 58       	subi	r25, 0x80	; 128
 bda:	44 0f       	add	r20, r20
 bdc:	55 1f       	adc	r21, r21
 bde:	59 f0       	breq	.+22     	; 0xbf6 <__fp_splitA+0x10>
 be0:	5f 3f       	cpi	r21, 0xFF	; 255
 be2:	71 f0       	breq	.+28     	; 0xc00 <__fp_splitA+0x1a>
 be4:	47 95       	ror	r20

00000be6 <__fp_splitA>:
 be6:	88 0f       	add	r24, r24
 be8:	97 fb       	bst	r25, 7
 bea:	99 1f       	adc	r25, r25
 bec:	61 f0       	breq	.+24     	; 0xc06 <__fp_splitA+0x20>
 bee:	9f 3f       	cpi	r25, 0xFF	; 255
 bf0:	79 f0       	breq	.+30     	; 0xc10 <__fp_splitA+0x2a>
 bf2:	87 95       	ror	r24
 bf4:	08 95       	ret
 bf6:	12 16       	cp	r1, r18
 bf8:	13 06       	cpc	r1, r19
 bfa:	14 06       	cpc	r1, r20
 bfc:	55 1f       	adc	r21, r21
 bfe:	f2 cf       	rjmp	.-28     	; 0xbe4 <__fp_split3+0xe>
 c00:	46 95       	lsr	r20
 c02:	f1 df       	rcall	.-30     	; 0xbe6 <__fp_splitA>
 c04:	08 c0       	rjmp	.+16     	; 0xc16 <__fp_splitA+0x30>
 c06:	16 16       	cp	r1, r22
 c08:	17 06       	cpc	r1, r23
 c0a:	18 06       	cpc	r1, r24
 c0c:	99 1f       	adc	r25, r25
 c0e:	f1 cf       	rjmp	.-30     	; 0xbf2 <__fp_splitA+0xc>
 c10:	86 95       	lsr	r24
 c12:	71 05       	cpc	r23, r1
 c14:	61 05       	cpc	r22, r1
 c16:	08 94       	sec
 c18:	08 95       	ret

00000c1a <__fp_zero>:
 c1a:	e8 94       	clt

00000c1c <__fp_szero>:
 c1c:	bb 27       	eor	r27, r27
 c1e:	66 27       	eor	r22, r22
 c20:	77 27       	eor	r23, r23
 c22:	cb 01       	movw	r24, r22
 c24:	97 f9       	bld	r25, 7
 c26:	08 95       	ret

00000c28 <__mulsf3>:
 c28:	0b d0       	rcall	.+22     	; 0xc40 <__mulsf3x>
 c2a:	c4 cf       	rjmp	.-120    	; 0xbb4 <__fp_round>
 c2c:	b5 df       	rcall	.-150    	; 0xb98 <__fp_pscA>
 c2e:	28 f0       	brcs	.+10     	; 0xc3a <__mulsf3+0x12>
 c30:	ba df       	rcall	.-140    	; 0xba6 <__fp_pscB>
 c32:	18 f0       	brcs	.+6      	; 0xc3a <__mulsf3+0x12>
 c34:	95 23       	and	r25, r21
 c36:	09 f0       	breq	.+2      	; 0xc3a <__mulsf3+0x12>
 c38:	a6 cf       	rjmp	.-180    	; 0xb86 <__fp_inf>
 c3a:	ab cf       	rjmp	.-170    	; 0xb92 <__fp_nan>
 c3c:	11 24       	eor	r1, r1
 c3e:	ee cf       	rjmp	.-36     	; 0xc1c <__fp_szero>

00000c40 <__mulsf3x>:
 c40:	ca df       	rcall	.-108    	; 0xbd6 <__fp_split3>
 c42:	a0 f3       	brcs	.-24     	; 0xc2c <__mulsf3+0x4>

00000c44 <__mulsf3_pse>:
 c44:	95 9f       	mul	r25, r21
 c46:	d1 f3       	breq	.-12     	; 0xc3c <__mulsf3+0x14>
 c48:	95 0f       	add	r25, r21
 c4a:	50 e0       	ldi	r21, 0x00	; 0
 c4c:	55 1f       	adc	r21, r21
 c4e:	62 9f       	mul	r22, r18
 c50:	f0 01       	movw	r30, r0
 c52:	72 9f       	mul	r23, r18
 c54:	bb 27       	eor	r27, r27
 c56:	f0 0d       	add	r31, r0
 c58:	b1 1d       	adc	r27, r1
 c5a:	63 9f       	mul	r22, r19
 c5c:	aa 27       	eor	r26, r26
 c5e:	f0 0d       	add	r31, r0
 c60:	b1 1d       	adc	r27, r1
 c62:	aa 1f       	adc	r26, r26
 c64:	64 9f       	mul	r22, r20
 c66:	66 27       	eor	r22, r22
 c68:	b0 0d       	add	r27, r0
 c6a:	a1 1d       	adc	r26, r1
 c6c:	66 1f       	adc	r22, r22
 c6e:	82 9f       	mul	r24, r18
 c70:	22 27       	eor	r18, r18
 c72:	b0 0d       	add	r27, r0
 c74:	a1 1d       	adc	r26, r1
 c76:	62 1f       	adc	r22, r18
 c78:	73 9f       	mul	r23, r19
 c7a:	b0 0d       	add	r27, r0
 c7c:	a1 1d       	adc	r26, r1
 c7e:	62 1f       	adc	r22, r18
 c80:	83 9f       	mul	r24, r19
 c82:	a0 0d       	add	r26, r0
 c84:	61 1d       	adc	r22, r1
 c86:	22 1f       	adc	r18, r18
 c88:	74 9f       	mul	r23, r20
 c8a:	33 27       	eor	r19, r19
 c8c:	a0 0d       	add	r26, r0
 c8e:	61 1d       	adc	r22, r1
 c90:	23 1f       	adc	r18, r19
 c92:	84 9f       	mul	r24, r20
 c94:	60 0d       	add	r22, r0
 c96:	21 1d       	adc	r18, r1
 c98:	82 2f       	mov	r24, r18
 c9a:	76 2f       	mov	r23, r22
 c9c:	6a 2f       	mov	r22, r26
 c9e:	11 24       	eor	r1, r1
 ca0:	9f 57       	subi	r25, 0x7F	; 127
 ca2:	50 40       	sbci	r21, 0x00	; 0
 ca4:	8a f0       	brmi	.+34     	; 0xcc8 <__mulsf3_pse+0x84>
 ca6:	e1 f0       	breq	.+56     	; 0xce0 <__mulsf3_pse+0x9c>
 ca8:	88 23       	and	r24, r24
 caa:	4a f0       	brmi	.+18     	; 0xcbe <__mulsf3_pse+0x7a>
 cac:	ee 0f       	add	r30, r30
 cae:	ff 1f       	adc	r31, r31
 cb0:	bb 1f       	adc	r27, r27
 cb2:	66 1f       	adc	r22, r22
 cb4:	77 1f       	adc	r23, r23
 cb6:	88 1f       	adc	r24, r24
 cb8:	91 50       	subi	r25, 0x01	; 1
 cba:	50 40       	sbci	r21, 0x00	; 0
 cbc:	a9 f7       	brne	.-22     	; 0xca8 <__mulsf3_pse+0x64>
 cbe:	9e 3f       	cpi	r25, 0xFE	; 254
 cc0:	51 05       	cpc	r21, r1
 cc2:	70 f0       	brcs	.+28     	; 0xce0 <__mulsf3_pse+0x9c>
 cc4:	60 cf       	rjmp	.-320    	; 0xb86 <__fp_inf>
 cc6:	aa cf       	rjmp	.-172    	; 0xc1c <__fp_szero>
 cc8:	5f 3f       	cpi	r21, 0xFF	; 255
 cca:	ec f3       	brlt	.-6      	; 0xcc6 <__mulsf3_pse+0x82>
 ccc:	98 3e       	cpi	r25, 0xE8	; 232
 cce:	dc f3       	brlt	.-10     	; 0xcc6 <__mulsf3_pse+0x82>
 cd0:	86 95       	lsr	r24
 cd2:	77 95       	ror	r23
 cd4:	67 95       	ror	r22
 cd6:	b7 95       	ror	r27
 cd8:	f7 95       	ror	r31
 cda:	e7 95       	ror	r30
 cdc:	9f 5f       	subi	r25, 0xFF	; 255
 cde:	c1 f7       	brne	.-16     	; 0xcd0 <__mulsf3_pse+0x8c>
 ce0:	fe 2b       	or	r31, r30
 ce2:	88 0f       	add	r24, r24
 ce4:	91 1d       	adc	r25, r1
 ce6:	96 95       	lsr	r25
 ce8:	87 95       	ror	r24
 cea:	97 f9       	bld	r25, 7
 cec:	08 95       	ret

00000cee <_exit>:
 cee:	f8 94       	cli

00000cf0 <__stop_program>:
 cf0:	ff cf       	rjmp	.-2      	; 0xcf0 <__stop_program>
